<?php

namespace App\Repository;

use App\Entity\InventoryItemEntity;

/**
 * InventoryItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InventoryItemRepository extends \Doctrine\ORM\EntityRepository
{
    public function validate($form) {

        $errors = array();

        $action = $form['action'];

        // d = delete
        if($action !== 'd') {

            $inventory_itemExist = $this->getEntityManager()->getRepository(InventoryItemEntity::class)
                ->createQueryBuilder('ii')
                ->where('ii.id != :id')
                ->andWhere('ii.item = :item')
                ->setParameters(array(
                    'id' => $form['id'],
                    'item' => $form['item']
                ))
                ->getQuery()->getResult();
            

            if($inventory_itemExist){
                $errors[] = 'Item already in inventory.';
            }
    
            if(empty($form['item'])){
                $errors[] = 'Item should not be blank.';
            }

            if(empty($form['beginning_quantity'])){
                $errors[] = 'Beginning Quantity should not be blank.';
            }

            if(empty($form['low_quantity'])){
                $errors[] = 'Low Quantity should not be blank.';
            }

            if(empty($form['buying_price'])){
                $errors[] = 'Buying Price should not be blank.';
            }

            if(empty($form['selling_price'])){
                $errors[] = 'Selling Price should not be blank.';
            }
        }

        return $errors;
    }

    public function ajax_list(array $get, array $userData){

        $columns = array(
            array('i.`description`', 'i.`description`', 'item'),
            array('ii.`quantity`', 'ii.`quantity`'),
            array('ii.`buying_price`', 'ii.`buying_price`'),
            array('ii.`selling_price`', 'ii.`selling_price`'),
            array('ii.`id`', "ii.`id`")
        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `inventory_item` ii";
        $joins = " LEFT JOIN `item` i ON i.id = ii.`item_id` ";
        $sqlWhere = "WHERE ii.`is_deleted` = 0";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        if($userData['type'] != 'Super Admin' || $userData['branchId']){

            $sqlWhere .= " AND ii.`branch_id` = :branchId";
            $stmtParams['branchId'] = $userData['branchId'];
        }


        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();


        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return array(
            'results' => $result,
            'total' => count($result_count)
        );
    }

    public function autocomplete_suggestions($q, array $userData) {

        $stmtParams = array(
            'q' => "%" . $q['query'] . "%"
        );
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){

            $andWhere.= ' AND ii.`branch_id` = :branchId';
            $stmtParams['branchId'] = $userData['branchId'];
        }

        $sql = "
            SELECT
                ii.`id`,
                i.`description` AS data,
                i.`description` AS value,
                ii.`selling_price` AS price
            FROM `inventory_item` ii
            LEFT JOIN `item` i  ON i.`id` = ii.`item_id`
            WHERE i.`description` LIKE :q
            AND i.`is_deleted` = 0
            AND ii.`quantity` > 0
            ".$andWhere."
            ORDER BY i.`description`
            LIMIT 0,20
        ";

        $query = $this->getEntityManager()->getConnection()->prepare($sql);

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;
    }

}
