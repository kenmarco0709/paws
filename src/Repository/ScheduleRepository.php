<?php

namespace App\Repository;

use App\Entity\ScheduleEntity;

/**
 * ScheduleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScheduleRepository extends \Doctrine\ORM\EntityRepository
{

    public function validate($schedule_form) {


        $errors = array();

        $action = $schedule_form['action'];

        // d = delete
        if(!in_array($schedule_form['action'], ['d']) ) {
            
            if(empty($schedule_form['admission_type'])){
                $errors[] = 'Please select a type';
            }

            if(empty($schedule_form['client'])){
                $errors[] = 'Please select a client';
            }
           
            if($schedule_form['action'] != 'u'){
                if(!isset($schedule_form['schedule_pets']) || !count($schedule_form['schedule_pets'])){

                    $errors[] = 'Please choose atleast 1 pet';
                }
            }

            if(strtotime(date('m/d/Y')) > strtotime(($schedule_form['schedule_date']))){
                $errors[] = 'System cant schedule past days.';

            }
        }

        return $errors;
    }

    public function ajax_list(array $get, $userData){

        $columns = array(
            array('a.`id`', "a.`id`"),
            array("CONCAT(c.`first_name`, ' ', c.`last_name`)", "CONCAT(c.`first_name`, ' ', c.`last_name`)", 'client'),
            array("CONCAT(v.`first_name`, ' ', v.`last_name`)", "CONCAT(v.`first_name`, ' ', v.`last_name`)", 'vet'),
            array('a.`status`', "a.`status`", "status"),
            array("CONCAT(app.petName, ':' ,app.petId )", "CONCAT(app.petName, ':' ,app.petId )", 'petName'),
            array('DATE_FORMAT(a.`schedule_date`, "%m/%d/%Y")', 'DATE_FORMAT(a.`schedule_date`, "%m/%d/%Y")', 'scheduleDate'),
            array('a.`id`', "a.`id`", "aId"),
            array('aa.`id`', "aa.`id`", "admissionId")

        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `schedule` a";
        $sqlWhere = " WHERE a.`is_deleted` = 0 AND a.schedule_date >= :now";
        $sqlWhere .= " AND a.`status` NOT IN ('Is Confined', 'Admitted')";
        $joins = " LEFT JOIN `client` c ON c.`id` = a.`client_id`";
        $joins .= " LEFT JOIN `user` v ON v.`id` = a.`attending_vet_id`";

        $joins .= " LEFT JOIN `admission` aa ON aa.`id` = a.`admission_id`";
        $joins .= " LEFT JOIN (
                        SELECT
                            GROUP_CONCAT(p.`name` SEPARATOR '|') AS petName,    
                            GROUP_CONCAT(p.`id` SEPARATOR '|') AS petId,
                            ap.`schedule_id`
                        FROM `schedule_pet` ap
                        LEFT JOIN `pet` p ON ap.`pet_id` = p.`id` 
                        GROUP BY ap.`schedule_id`
                )  app ON app.`schedule_id` = a.`id`";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        $stmtParams['now'] = date('Y-m-d 00:00:00');
        
        $startDate = $get['startDate'];
        $endDate = $get['endDate'];

        if(!is_null($startDate) && !empty($startDate) ){

            $stmtParams['startDate'] = date_format(date_create($startDate),"Y-m-d 00:00:00");
            $sqlWhere.= " AND a.`schedule_date` >= :startDate";
        }
        if(!is_null($endDate) && !empty($endDate) ){

            $stmtParams['endDate'] = date_format(date_create($endDate),"Y-m-d 23:59:59");
            $sqlWhere.= " AND a.`schedule_date` <= :endDate";

        }

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }


        if($userData['type'] != 'Super Admin' || $userData['branchId']){

            $sqlWhere .= " AND c.`branch_id` = :branchId";
            $stmtParams['branchId'] = $userData['branchId'];
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }                        
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $hasAdmit = false;

        if($userData['type'] == 'Super Admin'  || in_array('Schedule Admit', $userData['accesses'])){

            $formUrl = $url . 'schedule/admit';  
            $hasAdmit = true;
        }

        foreach($result as $row) {

            $id2 = base64_encode($row['aId']);
            $pet = "";

            if($row['petName']){
                
                $petNameDatas = explode(":", $row['petName']);
                $names = explode("|" , $petNameDatas[0]);
                $ids = explode("|",$petNameDatas[1]);

                $idsCtr = count($ids);
                foreach($ids as $k => $id){
                    $pet.= '<a href="javascript:void(0);" value="'.$id.'" class="ml-1" >'.$names[$k].'</a>' . (($idsCtr - 1  > $k) ? ", " : "" );
                }
            }

            $action = '';
            
             if($hasAdmit){
                
                if(strtotime($row['scheduleDate']) === strtotime(date('m/d/Y')) && $row['status'] != 'Admitted'){
                    $action.= "<a  class='action-button-style btn btn-primary table-btn hide' href='$formUrl/$id2' data-type='".($row['admissionId'] ? 'follow-up' : '') ."'>Admit</a>";
                } else {
                    $action.= "<a  style='display:none;' class='action-button-style btn btn-primary table-btn hide' href='$formUrl/$id2' data-type='".($row['admissionId'] ? 'follow-up' : '') ."'>Admit</a>";
    
                }
            } else {
                $action.= "<a  style='display:none;' class='action-button-style btn btn-primary table-btn hide' href='$formUrl/$id2' data-type='".($row['admissionId'] ? 'follow-up' : '') ."'>Admit</a>";

            }
            

            $values = array(
                $row['id'],
                $row['client'],
                $row['vet'],
                $row['status'],
                $pet,
                $row['scheduleDate'] ,
                $action,
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function getAllScheduleIds($dates, array $userData){


        $result =[];
        $stmtParams =[];
        $andWhere = ' WHERE s.`schedule_date` BETWEEN :startDate AND :endDate ';
        $stmtParams['startDate'] = date_format(date_create($dates['start_date']),"Y-m-d 00:00:00");
        $stmtParams['endDate'] =  date_format(date_create($dates['start_date']),"Y-m-d 23:59:59");

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' AND s.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }


        $query = $this->getEntityManager()->getConnection()->prepare("
              SELECT 
                s.`id`
              FROM `schedule` s
              $andWhere
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return $result;
    }

    public function branchSchedules($dates, array $userData){


        $result =[];
        $stmtParams =[];
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE s.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }


        $query = $this->getEntityManager()->getConnection()->prepare("
              SELECT 
                TO_BASE64(s.`id`) AS id,
                DATE_FORMAT(s.`schedule_date` ,'%Y') AS scheduleYear,
                DATE_FORMAT(s.`schedule_date` , '%m') AS scheduleMonth,
                DATE_FORMAT(s.`schedule_date` , '%d') AS scheduleDay,
                CONCAT(c.`first_name`, ' ' , c.`last_name`, ' for pet ', at.`description` ) AS schedules,
                s.`admission_id` AS admission,
                CASE
                WHEN at.`description` = 'Consultation' THEN '#D23A41'
                WHEN at.`description` = 'Laboratory' THEN '#218838'
                WHEN at.`description` = 'Other Surgical Procedures' THEN '#0069d9'
                WHEN at.`description` = 'Vaccination' THEN '#ffff00'
                ELSE '#ff00ff'
                END AS bgColor
              FROM `schedule` s
              LEFT JOIN `client` c ON c.`id` = s.`client_id`
              LEFT JOIN `admission_type` at ON at.`id` = s.`admission_type_id`
              LEFT JOIN `user` attendingVet ON attendingVet.`id` = s.`attending_vet_id`
              $andWhere
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);
        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;

    }

    public function report($startDate, $endDate, $scheduleType, $status, $userData) {
       
        $stmtParams = array();
        $andWhere = "";

        if(!is_null($startDate) && $startDate != 'null'){

            $stmtParams['startDate'] = date_format(date_create($startDate),"Y-m-d 00:00:00");
            $andWhere.= " AND s.`schedule_date` >= :startDate";
        }
        if(!is_null($endDate) && $endDate != 'null'){

            $stmtParams['endDate'] = date_format(date_create($endDate),"Y-m-d 23:59:59");
            $andWhere.= " AND s.`schedule_date` <= :endDate";
        }

        if(!is_null($scheduleType) && $scheduleType != 'null' ){

            $stmtParams['scheduleType'] = $scheduleType;
            $andWhere.= " AND s.`admission_type_id` <= :scheduleType";
        }

        if(!is_null($status) && $status != 'all' ){

            $stmtParams['status'] = $status;
            $andWhere.= " AND s.`status` <= :status";
        }
        
        $sql = "
            SELECT
                s.`id`,
                DATE_FORMAT(s.`schedule_date`, '%m/%d/%Y') AS scheduleDate,
                CONCAT(c.`first_name`, ' ', c.`last_name`) AS client,
                cp.schedulePets,
                s.`status`
            FROM `schedule` s
            LEFT JOIN `client` c ON c.`id` = s.`client_id`
            LEFT JOIN `service_type` st ON st.`id` = s.`admission_type_id`
            LEFT JOIN (
                SELECT
                    cp.`schedule_id`,
                    GROUP_CONCAT( p.`name`) AS schedulePets
                FROM `schedule_pet` cp
                LEFT JOIN `pet` p ON p.`id` = cp.`pet_id`
                GROUP BY cp.`schedule_id`    
            ) cp ON cp.`schedule_id` = s.`id`
            WHERE s.`branch_id` = :branchId 
            ".$andWhere."
            AND s.`is_deleted` = 0
            ORDER BY s.`schedule_date` DESC
        ";


        $stmtParams['branchId'] = $userData['branchId'];
        $query = $this->getEntityManager()->getConnection()->prepare($sql);

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }

        $res = $query->executeQuery();
        $results = $res->fetchAllAssociative();

        return $results;
    }


}
