<?php

namespace App\Repository;

use App\Entity\ClientPetEntity;


/**
 * PetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientPetRepository extends \Doctrine\ORM\EntityRepository
{
    public function validate($form) {

        $errors = array();
        $petExist = $this->getEntityManager()->getRepository(ClientPetEntity::class)
            ->createQueryBuilder('cp')
            ->leftJoin('cp.pet', 'p')
            ->leftJoin('cp.client', 'c')
            ->where('c.id = :client')
            ->andWhere('p.id = :pet')
            ->andWhere('cp.isDeleted = :is_deleted')
            ->setParameters(array(
                'pet' => $form['pet'],
                'is_deleted' => false,
                'client' => $form['client']
            ))
            ->getQuery()->getResult();
        
        if($petExist){
            $errors[] = 'Pet is already owned by this client.';
        }

        return $errors;
    }

    public function validateTransfer($form, $clientPetToTransfer) {

        $errors = array();
        $petExist = $this->getEntityManager()->getRepository(ClientPetEntity::class)
            ->createQueryBuilder('cp')
            ->leftJoin('cp.pet', 'p')
            ->leftJoin('cp.client', 'c')
            ->where('c.id = :client')
            ->andWhere('p.id = :pet')
            ->andWhere('cp.isDeleted = :is_deleted')
            ->setParameters(array(
                'pet' => $clientPetToTransfer->getPet()->getId(),
                'is_deleted' => false,
                'client' => $form['client']
            ))
            ->getQuery()->getResult();
        
        if($petExist){
            $errors[] = 'Pet is already owned by this client.';
        }

        return $errors;
    }

    public function validateRemove($clientPet) {

        $errors = array();
        $clientPetExist = $this->getEntityManager()->getRepository(ClientPetEntity::class)
            ->createQueryBuilder('cp')
            ->leftJoin('cp.pet', 'p')
            ->where('p.id = :pet')
            ->andWhere('cp.isDeleted = :is_deleted')
            ->setParameters(array(
                'pet' => $clientPet->getPet()->getId(),
                'is_deleted' => false
            ))
            ->getQuery()->getResult();

        if(count($clientPetExist) < 2){
            $errors[] = 'Cant remove due to pet will be no longer have an owner.';
        }

        return $errors;
    }
}
