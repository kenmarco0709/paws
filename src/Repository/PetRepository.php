<?php

namespace App\Repository;

use App\Entity\PetEntity;
use App\Entity\ClientPetEntity;


/**
 * PetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PetRepository extends \Doctrine\ORM\EntityRepository
{
    public function validate($form) {

        $errors = array();

        $action = $form['action'];

        // d = delete
        if($action == 'n') {

            $petExist = $this->getEntityManager()->getRepository(ClientPetEntity::class)
                ->createQueryBuilder('cp')
                ->leftJoin('cp.pet', 'p')
                ->leftJoin('cp.client', 'c')
                ->where('c.id != :id')
                ->andWhere('p.name = :description')
                ->andWhere('p.isDeleted = :is_deleted')
                ->andWhere('c.id = :client')
                ->setParameters(array(
                    'id' => $form['id'],
                    'description' => $form['name'],
                    'is_deleted' => false,
                    'client' => base64_decode($form['client_id'])
                ))
                ->getQuery()->getResult();
            
            if($action != 'u' && $petExist){
                $errors[] = 'Pet already exist.';
            }

        } else {
            
            if(empty($form['name'])){
                $errors[] = 'Name should not be blank.';
            }
        }

        return $errors;
    }

    public function validate_branch_pet($form) {

        $errors = array();

        $action = $form['action'];

        // d = delete
        if($action == 'n') {

            $petExist = $this->getEntityManager()->getRepository(PetEntity::class)
                ->createQueryBuilder('p')
                ->where('p.id != :id')
                ->andWhere('p.name = :name')
                ->andWhere('p.isDeleted = :is_deleted')
                ->andWhere('p.branch = :branch')
                ->andWhere('p.species = :species')
                ->andWhere('p.breed = :breed')

                ->setParameters(array(
                    'id' => $form['id'],
                    'name' => $form['name'],
                    'is_deleted' => false,
                    'branch' => base64_decode($form['branch']),
                    'species' => $form['species'],
                    'breed' => $form['breed'],

                ))
                ->getQuery()->getResult();
            
            if($action != 'u' && $petExist){
                $errors[] = 'Pet already exist.';
            }

        } else {
            
            if(empty($form['name'])){
                $errors[] = 'Name should not be blank.';
            }
        }

        return $errors;
    }

    public function validateMerge($form) {

        $errors = array();

        if($form['pet'] == $form['merge_pet']){
            $errors[] = 'Cant merge same pet.';
        }

        return $errors;
    }

    public function ajax_list(array $get, array $userData){

        if(isset($get['clientId'])){
           
            $sqlWhere = " WHERE cp.`is_deleted` = 0";
            $sqlWhere .= " AND p.`is_deleted` = 0";

            $columns = array(
                array('p.`name`', 'p.`name`', 'name'),
                array('b.`description`', 'b.`description`', 'breed'),
                array('p.`gender`', 'p.`gender`', 'gender'),
                array('p.`color_markings`', 'p.`color_markings`', 'color'),
                array('cp.`id`', "cp.`id`"),
                array('c.`id`', "c.`id`", "clientId")
            );

            $from = " FROM `client_pet` cp";
            $joins = " LEFT JOIN `pet` p ON p.`id` = cp.`pet_id`";
            $joins .= " LEFT JOIN `client` c ON cp.`client_id` = c.`id`";


        } else {
            
            $columns = array(
                array("cp.client", "cp.client", 'client'),
                array('p.`name`', 'p.`name`', 'name'),
                array('b.`description`', 'b.`description`', 'breed'),
                array('p.`gender`', 'p.`gender`', 'gender'),
                array('p.`color_markings`', 'p.`color_markings`', 'color'),
                array('p.`id`', "p.`id`"),
                array('p.`id`', "p.`id`")

            );
            $branchId = $userData['branchId'];

            $from = "FROM `pet` p";
            $joins = " LEFT JOIN (
                SELECT 
                    DISTINCT c.`branch_id` AS branchId,
                    GROUP_CONCAT(CONCAT(c.`first_name` , ' ', c.`last_name`)) AS client,
                    GROUP_CONCAT(p.`id`) AS petId,
                    cp.`pet_id`
                FROM `client_pet` cp
                LEFT JOIN `client` c ON c.`id` = cp.`client_id`
                LEFT JOIN `pet` p ON p.`id` = cp.`client_id`
                WHERE c.`branch_id` = '".$branchId."'
                AND cp.`is_deleted` = 0
                GROUP BY cp.`pet_id`
            )  cp ON cp.`pet_id` = p.`id`";

            $sqlWhere = "WHERE cp.`client` IS NOT NULL";
            $sqlWhere .= " AND p.`is_deleted` != 1";

        }

        $asColumns = array();
        $select = "SELECT ";
        $joins .= " LEFT JOIN `breed` b ON p.`breed_id` = b.`id`";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();
        
        if(isset($get['clientId'])){
            
            if($userData['type'] != 'Super Admin' || $userData['branchId']){

                $sqlWhere .= " AND c.branch_id = :branchId";
                $stmtParams['branchId'] = $userData['branchId'];
            }

            $sqlWhere.= " AND cp.`client_id` = :clientId";
            $stmtParams['clientId'] = $get['clientId'];
        }

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
        * Output
        */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );
        
        $url = $get['url'];
        $formUrl = $url . 'pet/form';  
        $hasUpdate = $userData['type'] == 'Super Admin'  || in_array('Pet Update', $userData['accesses']) ? true :  false;
        $hasDelete = $userData['type'] == 'Super Admin'  || in_array('Pet Delete', $userData['accesses']) ? true : false;
        $hasMerge = $userData['type'] == 'Super Admin'  || in_array('Pet Merge', $userData['accesses']) ? true : false;
        $hasTransfer = $userData['type'] == 'Super Admin'  || in_array('Client Details Pet Transfer', $userData['accesses']) ? true : false;
        $hasRemove = $userData['type'] == 'Super Admin'  || in_array('Client Details Pet Remove', $userData['accesses']) ? true : false;

        foreach($result as $row) {

            $id = base64_encode($row['id']);

            $action ='';
      
            if(isset($get['clientId'])){

                $action .= $hasTransfer ?  " <a class='href-modal action-button-style btn btn-success' href='javascript:void(0);' data-type='pet-transfer' data-id='".$row['id']."' >Transfer</a>" : "";
                $action .= $hasRemove ? " <a class='ask-continue href-remove action-button-style btn btn-danger' href='javascript:void(0);' data-message='Are you sure you want to remove client owner from this pet?' data-id='".$row['id']."' >Remove</a>" : "" ;


                $values = array(
                    "<a href='".$url."pet/details/".base64_encode($row['id'])."'>".$row['name']."</a>",
                    $row['breed'],
                    $row['gender'],
                    $row['color'],
                    $action
                );
            } else {

                $action .= $hasUpdate ? "<a class='action-button-style btn btn-primary' href='$formUrl/u/$id'>Update</a>" : "";
                $action .= $hasDelete ? " <a class='action-button-style btn btn-danger href-delete' href='javascript:void(0);' data-message='Are you sure you want to delete this record?' data-id='".$row['id']."' >Delete</a>" : "";
                $action .= $hasMerge  ? " <a class='href-modal action-button-style btn btn-success href-delete' href='javascript:void(0);' data-id='".$row['id']."' data-type='merge-form'>Merge</a>" : "";

                $values = array(
                    $row['client'],
                    "<a href='".$url."pet/details/".base64_encode($row['id'])."'>".$row['name']."</a>",
                    $row['breed'],
                    $row['gender'],
                    $row['color'],
                    $action
                );
            }

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function autocomplete_suggestions($q) {

        $sql = "
            SELECT
                c.`id`,
                CONCAT_WS(' - ', c.`description`, ct.`description` ) AS data,
                CONCAT_WS(' - ', c.`description`, ct.`description`) AS value,
                c.`description` AS pet_desc,
                ct.`id` AS city_id,
                ct.`description` AS city_desc
            FROM `pet` c
            LEFT JOIN `city` ct ON ct.`id` = c.`city_id`
            WHERE c.`description` LIKE :description
            AND c.`is_deleted` = 0
            ORDER BY c.`description`
            LIMIT 0,20
        ";

        $query = $this->getEntityManager()->getConnection()->prepare($sql);

        $query->execute(array(
            'description' => "%$q%"
        ));

        $result = $query->fetchAll();

        return $result;
    }



    public function withClientAutocompleteSuggestions($q, $userData) {

        $stmtParams = array(
            'q' => "%" . $q['query'] . "%"
        );
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE c.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }

        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
                p.`id`,
                CONCAT(c.`first_name`, ' ', c.`last_name`, ' - ' , p.`name`) AS data,
                CONCAT(c.`first_name`, ' ', c.`last_name`, ' - ' , p.`name`) AS value
            FROM `client_pet` cp
            LEFT JOIN `pet` p ON p.`id` = cp.`pet_id`
            LEFT JOIN  `client` c ON c.`id` = cp.`client_id`
            $andWhere
            AND cp.`is_deleted` = 0
            AND p.`is_deleted` = 0
            AND CONCAT(c.`first_name`, ' ', c.`last_name`, ' - ' , p.`name`) LIKE :q
            ORDER BY p.`name`
            LIMIT 0,20
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;
    }

    public function withAdopterAutocompleteSuggestions($q, $userData) {

        $stmtParams = array(
            'q' => "%" . $q['query'] . "%"
        );
        $andWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE p.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }

        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
                p.`id`,
                CONCAT(sa.adopter,' - ', p.`name`) AS data,
                CONCAT(sa.adopter,' - ', p.`name`) AS value,
                sas.activeAdmission
            FROM `pet` p
            LEFT JOIN(
                SELECT 
                    sa.`branch_id` AS branchId,
                    sa.`pet_id`,
                    sa.`adopter_name` AS adopter
                FROM `shelter_admission` sa 
                WHERE sa.`status`= 'Fostered'
                AND sa.`created_at` IN ( 
                    SELECT 
                        MAX(created_at) 
                    FROM `shelter_admission` ss 
                    WHERE ss.`status` = 'Fostered' 
                    AND ss.`is_deleted` = 0 
                    GROUP BY ss.`pet_id` ) 
                AND sa.`is_deleted` = 0 
                GROUP BY sa.`pet_id` ) sa ON sa.`pet_id` = p.`id` 
            LEFT JOIN(
                    SELECT 
                        sa.`branch_id` AS branchId,
                        sa.`pet_id` AS activeAdmission
                    FROM `shelter_admission` sa 
                    WHERE sa.`status`= 'Admitted' 
                    AND sa.`is_deleted` = 0 
                    GROUP BY sa.`pet_id` ) sas ON sas.activeAdmission = p.`id`     
            $andWhere
            AND p.`is_deleted` = 0
            AND CONCAT(p.`name`) LIKE :q
            AND sa.adopter IS NOT NULL
            AND sas.activeAdmission IS NULL
            ORDER BY p.`name`
            LIMIT 0,20
        ");


        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;
    }
}
