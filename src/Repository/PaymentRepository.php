<?php

namespace App\Repository;

use App\Entity\PaymentEntity;

/**
 * BillingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends \Doctrine\ORM\EntityRepository
{

    public function validate($paymentForm) {

        $errors = [];
        if($paymentForm['action'] != 'd'){

            if(empty($paymentForm['payment_type'])){
                $errors[] = 'Payment Type should be defined.';
            }

            if(empty($paymentForm['amount'])){
                $errors[] = 'Amount should not be empty.';
            }

            if(empty($paymentForm['payment_date'])){
                $errors[] = 'Payment Date should not be empty.';
            }
        }
        
        return $errors;
    }


    public function payment_ajax_list(array $get, $userData){

        $columns = array(
            array('DATE_FORMAT(p.`payment_date`, "%m/%d/%Y")', 'DATE_FORMAT(p.`payment_date`, "%m/%d/%Y")', "paymentDate"),
            array('pt.`description`', "pt.`description`", "paymentType"),
            array('p.`amount`', "p.`amount`", "amount"),
            array('p.`id`', "p.`id`", "id"),
        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `payment` p";
        $sqlWhere = " WHERE p.`is_deleted` = 0";
        $sqlWhere .= " AND p.`billing_id` =:billingId";
        $joins = " LEFT JOIN `payment_type` pt ON pt.`id` = p.`payment_type_id`";
         $joins .= " LEFT JOIN `invoice` i ON i.`id` = p.`invoice_id`";

        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();


        $stmtParams['billingId'] = base64_decode($get['billingId']);
        
        if(isset($userData['branchId'])){
            $sqlWhere .= ' AND i.`branch_id` = :branchId';
            $stmtParams['branchId'] = $userData['branchId'];

        }

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }

                    }
                } 

            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $hasDetails = false;
        if($userData['type'] == 'Super Admin'  || in_array('Billing Details', $userData['accesses'])){

            $formUrl = $url . 'billing/' . $get['billingId'] . '/payment/form/u';  
            $hasDetails = true;
        }

        foreach($result as $row) {

            $id = base64_encode($row['id']);
        
            $action = $hasDetails ? "<a class='action-button-style btn btn-primary table-btn' href='$formUrl/$id'>Update</a>" : "";

            $values = array(
                $row['paymentDate'],
                $row['paymentType'],
                number_format($row['amount'], 2, ".", ","),
                $action,
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function ajax_list(array $get, $userData){

      

        if(isset($get['clientId'])){
            $columns = array(
                array('DATE_FORMAT(p.`payment_date` , "%m/%d/%Y")', 'DATE_FORMAT(p.`payment_date` , "%m/%d/%Y")', 'paymentDate'),
                array('p.`invoice_id`','p.`invoice_id`', 'invoiceNo'),
                array('pt.`description`', 'pt.`description`' , 'paymentType'),
                array('p.`amount`', 'p.`amount`' , 'amount'),
                array('p.`is_deposit`', 'p.`is_deposit`' , 'isDeposit')

            );
        } else {
            $columns = array(
                array('DATE_FORMAT(p.`payment_date` , "%m/%d/%Y")', 'DATE_FORMAT(p.`payment_date` , "%m/%d/%Y")', 'paymentDate'),
                array('p.`invoice_id`','p.`invoice_id`', 'invoiceNo'),
                array('c.`first_name`', "CONCAT(c.`first_name`, ' ', c.`last_name`)", 'client'),
                array('pt.`description`', 'pt.`description`' , 'paymentType'),
                array('p.`amount`', 'p.`amount`' , 'amount'),
                array('p.`is_deposit`', 'p.`is_deposit`' , 'isDeposit')

            );
        }
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `payment` p";
        $joins = " LEFT JOIN `invoice` i ON i.`id` = p.`invoice_id`";
        $joins .= " LEFT JOIN `client` c ON c.`id` = i.`client_id`";
        $joins .= " LEFT JOIN `payment_type` pt ON pt.`id` = p.`payment_type_id`";
        $sqlWhere = "";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        if(isset($get['clientId'])){
        
            $sqlWhere.= " WHERE i.`client_id` = :clientId";
            $stmtParams['clientId'] = $get['clientId'];
        }

        if($userData['type'] != 'Super Admin' || $userData['branchId']){

            $sqlWhere .= (!empty($sqlWhere) ? " AND "  : " WHERE ") . " i.`branch_id` = :branchId";
            $stmtParams['branchId'] = $userData['branchId'];
        }

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();


        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return array(
            'results' => $result,
            'total' => count($result_count)
        );
    }

    
    public function report($startDate, $endDate, $userData) {
       
        $stmtParams = array();
        $andWhere = "";

        if(!is_null($startDate) && !empty($startDate)){

            $stmtParams['startDate'] = date_format(date_create($startDate),"Y-m-d 00:00:00");
            $andWhere.= " AND p.`payment_date` >= :startDate";
        }
        if(!is_null($endDate) && !empty($endDate) ){

            $stmtParams['endDate'] = date_format(date_create($endDate),"Y-m-d 23:59:59");
            $andWhere.= " AND p.`payment_date` <= :endDate";

        }

        $sql = "
            SELECT
                i.`id` AS invoiceId,
                DATE_FORMAT(p.`payment_date`, '%m/%d/%Y') AS paymentDate,
                pt.`description` AS paymentType,
                p.`amount` AS amount,
                CONCAT(c.`first_name`, ' ', c.`last_name`) AS client
            FROM `payment` p
            LEFT JOIN `payment_type` pt ON pt.`id` = p.`payment_type_id`
            LEFT JOIN `invoice` i ON i.`id` = p.`invoice_id`
            LEFT JOIN `client` c ON c.`id` = i.`client_id`
            WHERE i.`branch_id` = :branchId 
            ".$andWhere."
        ";


        $stmtParams['branchId'] = $userData['branchId'];
        $query = $this->getEntityManager()->getConnection()->prepare($sql);

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }

        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return $result;
    }

    public function getCtr($get, array $userData){

        $result =[];
        $stmtParams =[];
        $andWhere = '';
        $admissionWhere = '';
        $invoiceWhere = '';
        $groupBy ="";

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE i.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }

        if(isset($get) && $get != ''){

            $dateToday = date("Y-m-d");
            if($get == 'daily'){

                $andWhere.= ' AND p.`payment_date` BETWEEN :startDate AND :endDate';
                $stmtParams['startDate'] =  date("Y-m-d 00:00:00");
                $stmtParams['endDate'] =  date("Y-m-d 23:59:59");
                $groupBy .= 'GROUP BY DATE_FORMAT(p.`payment_date`, "%Y/%m/%d")';
            } else {

                $andWhere.= ' AND p.`payment_date` BETWEEN :startDate AND :endDate';
                
                $timestamp    = strtotime(date("F Y"));
                $stmtParams['startDate'] =  date('Y-m-01 00:00:00', $timestamp);
                $stmtParams['endDate'] = date('Y-m-t 12:59:59', $timestamp);
                $groupBy .= ' GROUP BY DATE_FORMAT(p.`payment_date`, "%Y/%m")';

            }   
        }

        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
              SUM(p.`amount`) AS amount
            FROM `payment` p
            LEFT JOIN `invoice` i ON i.`id` = p.`invoice_id`
            $andWhere
            $groupBy
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return $result ? ($result[0]['amount']) : 0;
    }

    public function getYearlyAnalytics(array $userData){

        $result =[];

        $stmtParams =[];
        $andWhere = '';
        $admissionWhere = '';
        $invoiceWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE i.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }

        $yearNow= date('Y');
        $nextYear = $yearNow + 1;
        $query = $this->getEntityManager()->getConnection()->prepare("
                with recursive cte as (
                    select '".$yearNow."-01-01 00:00:00' dt
                    union all 
                    select dt + interval 1 month from cte where dt < '".$nextYear."-01-01' - interval 1 month
                )
                select
                    row_number() over(order by cte.`dt`) id,
                    DATE_FORMAT(cte.`dt`, '%M') as yearMonth,
                    IFNULL(p.amount, 0) as amount
                from `cte` cte 
                LEFT JOIN(
                    SELECT 
                       SUM( p.`amount`) as amount,
                       p.`payment_date` as paymentDate
                    FROM `payment` p
                    LEFT JOIN `invoice` i ON i.`id` = p.`invoice_id`
                    ".$andWhere."
                    GROUP BY DATE_FORMAT(p.`payment_date`, '%M')     
                ) p ON DATE_FORMAT(p.paymentDate, '%M') = DATE_FORMAT(cte.`dt`, '%M')
        ");

       


        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return $result;
    }

    public function getMonthlyAnalytics(array $userData){

        $result =[];

        $stmtParams =[];
        $andWhere = '';
        $admissionWhere = '';
        $invoiceWhere = '';

        if($userData['type'] != 'Super Admin'){

             $andWhere.= ' WHERE i.branch_id = :branchId'; 
             $stmtParams['branchId'] = $userData['branchId'];   
        }
       
        $firstDay  = date("Y-m-d", strtotime("first day of this month"));
        $lastDay = date("Y-m-d 23:59:59", strtotime("last day of this month"));
        $query = $this->getEntityManager()->getConnection()->prepare("
                with recursive cte as (
                    select '".$firstDay." 00:00:00' dt
                    union all 
                    select dt + interval 1 day from cte where dt < '".$lastDay."' - interval 1 day
                )
                select
                    row_number() over(order by cte.`dt`) id,
                    DATE_FORMAT(cte.`dt`, '%d') as dayMonth,
                    IFNULL(p.amount, 0) as amount
                from `cte` cte 
                LEFT JOIN(
                    SELECT 
                       SUM( p.`amount`) as amount,
                       p.`payment_date` as paymentDate
                    FROM `payment` p
                    LEFT JOIN `invoice` i ON i.`id` = p.`invoice_id`
                    ".$andWhere."
                    GROUP BY DATE_FORMAT(p.`payment_date`, '%d')     
                ) p ON DATE_FORMAT(p.paymentDate, '%d') = DATE_FORMAT(cte.`dt`, '%d')
        ");

       


        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return $result;
    }

}
