<?php

namespace App\Repository;

use App\Entity\ReimbursedPaymentEntity;

/**
 * BillingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReimbursedPaymentRepository extends \Doctrine\ORM\EntityRepository
{

    public function validate($reimbursed_paymentForm, $invoice) {

        $errors = [];
        if($reimbursed_paymentForm['action'] != 'd'){


            if($invoice->getStatus() != 'Paid Payment'){
                $errors[] = 'Invoice is not a Reimbursable.';

            } else {

                if((floatval(str_replace(',','',$reimbursed_paymentForm['amount'])) + floatval($invoice->getAmountDue())) > 0 ){
                    $errors[] = 'Amount is not a Reimbursable.';
                }
                
            }

            if(empty($reimbursed_paymentForm['amount'])){
                $errors[] = 'Amount should not be empty.';
            }
        }
        
        return $errors;
    }


    public function reimbursed_payment_ajax_list(array $get, $userData){

        $columns = array(
            array('DATE_FORMAT(p.`created_at`, "%m/%d/%Y")', 'DATE_FORMAT(p.`created_at`, "%m/%d/%Y")', "reimbursed_paymentDate"),
            array('p.`amount`', "p.`amount`", "amount"),
            array('p.`id`', "p.`id`", "id"),
        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `reimbursed_payment` p";
        $sqlWhere = " WHERE p.`is_deleted` = 0";
        $joins = " LEFT JOIN `reimbursed_payment_type` pt ON pt.`id` = p.`reimbursed_payment_type_id`";
         $joins .= " LEFT JOIN `invoice` i ON i.`id` = p.`invoice_id`";

        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();


        $stmtParams['billingId'] = base64_decode($get['billingId']);
        
        if(isset($userData['branchId'])){
            $sqlWhere .= ' AND i.`branch_id` = :branchId';
            $stmtParams['branchId'] = $userData['branchId'];

        }

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }

                    }
                } 

            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $hasDetails = false;
        if($userData['type'] == 'Super Admin'  || in_array('Billing Details', $userData['accesses'])){

            $formUrl = $url . 'billing/' . $get['billingId'] . '/reimbursed_payment/form/u';  
            $hasDetails = true;
        }

        foreach($result as $row) {

            $id = base64_encode($row['id']);
        
            $action = $hasDetails ? "<a class='action-button-style btn btn-primary table-btn' href='$formUrl/$id'>Update</a>" : "";

            $values = array(
                $row['reimbursed_paymentDate'],
                number_format($row['amount'], 2, ".", ","),
                $action,
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function ajax_list(array $get, $userData){

      

        if(isset($get['clientId'])){
            $columns = array(
                array('DATE_FORMAT(p.`created_at` , "%m/%d/%Y")', 'DATE_FORMAT(p.`created_at` , "%m/%d/%Y")', 'reimbursed_paymentDate'),
                array('p.`invoice_id`','p.`invoice_id`', 'invoiceNo'),
                array('p.`amount`', 'p.`amount`' , 'amount'),

            );
        } else {
            $columns = array(
                array('DATE_FORMAT(p.`created_at` , "%m/%d/%Y")', 'DATE_FORMAT(p.`created_at` , "%m/%d/%Y")', 'reimbursed_paymentDate'),
                array('p.`invoice_id`','p.`invoice_id`', 'invoiceNo'),
                array('c.`first_name`', "CONCAT(c.`first_name`, ' ', c.`last_name`)", 'client'),
                array('p.`amount`', 'p.`amount`' , 'amount'),

            );
        }
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `reimbursed_payment` p";
        $joins = " LEFT JOIN `invoice` i ON i.`id` = p.`invoice_id`";
        $joins .= " LEFT JOIN `client` c ON c.`id` = i.`client_id`";
        $sqlWhere = "";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        if(isset($get['clientId'])){
        
            $sqlWhere.= " WHERE i.`client_id` = :clientId";
            $stmtParams['clientId'] = $get['clientId'];
        }

        if($userData['type'] != 'Super Admin' || $userData['branchId']){

            $sqlWhere .= (!empty($sqlWhere) ? " AND "  : " WHERE ") . " i.`branch_id` = :branchId";
            $stmtParams['branchId'] = $userData['branchId'];
        }

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();


        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        return array(
            'results' => $result,
            'total' => count($result_count)
        );
    }
}
