<?php

namespace App\Repository;

use App\Entity\ShelterAdmissionEntity;

/**
 * ShelterAdmissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShelterAdmissionRepository extends \Doctrine\ORM\EntityRepository
{

    public function validate($ShelterAdmission_form) {

        $errors = array();

        $action = $ShelterAdmission_form['action'];

        // d = delete
        if($action !== 'd') {

            //check if facility is full
            if($action == 'n'){
                if(empty($ShelterAdmission_form['pet'])){
                    $errors[] = 'Pet should not be blank.';
                }
            }
         
            $isFacilityFull = $this->checkFacilityCapacity($ShelterAdmission_form);

            if($isFacilityFull){
                $errors[] = 'Facility already full.';
            }
            if(empty($ShelterAdmission_form['facility'])){
                $errors[] = 'Facility should not be blank.';
            }

            if($ShelterAdmission_form['admission_type'] == 0 ){
                if(empty($ShelterAdmission_form['rescuer_name'])){
                    $errors[] = 'Rescuer Name should not be blank.';
                }
                if(empty($ShelterAdmission_form['admission_date'])){
                    $errors[] = 'Rescue Date should not be blank.';
                }
            } else {
                if(empty($ShelterAdmission_form['returned_reason'])){
                    $errors[] = 'Returned Reason should not be blank.';
                }
                if(empty($ShelterAdmission_form['returned_date'])){
                    $errors[] = 'Returned Date should not be blank.';
                }
            }
           
        }

        return $errors;
    }

    public function validateAdoptionForm($ShelterAdmission_form) {

        $errors = array();
  
        if(empty($ShelterAdmission_form['adopter_name'])){
            $errors[] = 'Adopter Name should not be blank.';
        }
        if(empty($ShelterAdmission_form['adoption_date'])){
            $errors[] = 'Adoption date should not be blank.';
        }

        
        return $errors;
    }

    public function validateFosteredForm($form) {

        $errors = array();
  
        if(empty($form['foster_name'])){
            $errors[] = 'Foster Name should not be blank.';
        }

        return $errors;
    }

    

    public function ajax_list(array $get, $userData){

          
        $columns = array(
            array('p.`name`', "p.`name`", "pet"),
            array('p.`gender`', "p.`gender`", "gender"),
            array('sp.`description`', "sp.`description`", "species"),
            array('p.`color_markings`', "p.`color_markings`", "colorMarkings"),
            array('CONCAT(f.`description` , "(", saf.`facilityAdmissionCtr`, "/",f.`capacity`,")")', 'CONCAT(f.`description` , "(", saf.`facilityAdmissionCtr`, "/",f.`capacity`,")")', "facility"),
            array('sa.`rescuer_name`', "sa.`rescuer_name`", "rescuer"),
            array('sa.`adopter_name`', "sa.`adopter_name`", "adopter"),
            array('DATE_FORMAT(sa.`admission_date`, "%m/%d/%Y")', 'DATE_FORMAT(sa.`admission_date`, "%m/%d/%Y")', "admissionDate"),
            array('DATE_FORMAT(sa.`adoption_date`, "%m/%d/%Y")', 'DATE_FORMAT(sa.`adoption_date`, "%m/%d/%Y")', "adoptionDate"),
            array('DATE_FORMAT(sa.`returned_date`, "%m/%d/%Y")', 'DATE_FORMAT(sa.`returned_date`, "%m/%d/%Y")', "returnedDate"),
            array('sa.`id`', "sa.`id`"),
        );
         
        $asColumns = array();
        $select = "SELECT";
        $from = "FROM `shelter_admission` sa";
        $sqlWhere = " WHERE sa.`is_deleted` = 0";
        $joins = " LEFT JOIN `pet` p ON p.`id` = sa.`pet_id`";
        $joins .= " LEFT JOIN `species` sp ON sp.`id` = p.`species_id`";
        $joins .= " LEFT JOIN `facility` f ON f.`id` = sa.`facility_id`";
        $joins .= " LEFT JOIN (
            SELECT 
                COUNT(*) AS facilityAdmissionCtr,
                sa.`facility_id`
            FROM `shelter_admission` sa
            GROUP BY sa.`facility_id`      
        ) saf ON saf.`facility_id` = sa.`facility_id`";
        $groupBy = "";
        $orderBy = "";
        $limit = "";


        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }


        if($userData['type'] != 'Super Admin' || $userData['branchId']){

            $sqlWhere .= " AND sa.`branch_id` = :branchId";
            $stmtParams['branchId'] = $userData['branchId'];
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $detailsUrl = '';
        $hasDetails = false;
        
        if($userData['type'] == 'Super Admin'  || in_array('Shelter Admission Details', $userData['accesses'])){

            $detailsUrl = $url . 'shelter_admission/details';  
            $hasDetails = true;
        }

        foreach($result as $row) {

            $id = base64_encode($row['id']);


            $action = $hasDetails ? "<a class='action-button-style btn btn-primary table-btn' href='$detailsUrl/$id'>Details</a>" : "";
               
                $values = array(
                    $row['pet'],
                    $row['gender'],
                    $row['species'],
                    $row['colorMarkings'],
                    // $row['adopter'],
                    $row['rescuer'],
                    $row['facility'],
                    $row['admissionDate'],
                    // $row['adoptionDate'],
                    $row['returnedDate'],
                    $action,
                );
            
         

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function ajax_history_list(array $get, $userData){

          
        $columns = array(
            array('sa.`id`', "sa.`id`"),
            array('DATE_FORMAT(sa.`admission_date`, "%m/%d/%Y")', 'DATE_FORMAT(sa.`admission_date`, "%m/%d/%Y")', "admissionDate"),
            array('f.`description`', "f.`description`", "facility"),
            array('sa.`status`', "sa.`status`", "status"),
            array('sa.`id`', "sa.`id`")
        );
         

      
        $asColumns = array();
        $select = "SELECT";
        $from = "FROM `shelter_admission` sa";
        $sqlWhere = " WHERE sa.`is_deleted` = 0";
        $joins = " LEFT JOIN `pet` p ON p.`id` = sa.`pet_id`";
        $joins .= " LEFT JOIN `facility` f ON f.`id` = sa.`facility_id`";

        $groupBy = "";
        $orderBy = "";
        $limit = "";


        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }


        if($get['petId']){

            $sqlWhere .= " AND sa.`pet_id` = :petId";
            $stmtParams['petId'] = base64_decode($get['petId']);


            $sqlWhere .= " AND sa.`id` != :id";
            $stmtParams['id'] = base64_decode($get['id']);
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $detailsUrl = '';
        $hasDetails = false;
        
        if($userData['type'] == 'Super Admin'  || in_array('Shelter Admission Details', $userData['accesses'])){

            $detailsUrl = $url . 'shelter_admission/details';  
            $hasDetails = true;
        }

        foreach($result as $row) {

            $id = base64_encode($row['id']);
              $action = $hasDetails ? "<a class='action-button-style ' href='$detailsUrl/$id'>".$row['id']."</a>" : "";
                $values = array(
                    $action,
                    $row['admissionDate'],
                    $row['facility'],
                    $row['status']
                );
            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function checkFacilityCapacity($shelterAdmissionForm) {


        $sql = "
            SELECT
                f.`id`,
                (IFNULL(f.`capacity`, 0) -  IFNULL(sa.shelterAdmissionCtr, 0)) AS availableSlot
            FROM `facility` f
            LEFT JOIN (
                SELECT 
                    COUNT(*) AS shelterAdmissionCtr,
                    sa.`facility_id`
                FROM `shelter_admission` sa
                WHERE (sa.`is_deleted` = 0 OR sa.`is_deleted` IS NULL)
                GROUP BY sa.`facility_id` 
            ) sa ON  sa.`facility_id` = f.`id`
            WHERE f.`id` = ".$shelterAdmissionForm['facility']."
            AND f.`branch_id` = ".$shelterAdmissionForm['branch']."
        ";

        $query = $this->getEntityManager()->getConnection()->prepare($sql);     
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        
        $availableSlot = isset($result) ? $result[0]['availableSlot'] : 0;

        if($availableSlot > 0){
            return false;
        }
        
        return true;
    }

    public function adoption_report($startDate, $endDate, $userData) {
       
        $stmtParams = array();
        $andWhere = "";

        if(!is_null($startDate) && !empty($startDate) ){

            $stmtParams['startDate'] = date_format(date_create($startDate),"Y-m-d 00:00:00");
            $andWhere.= " AND sa.`adoption_date` >= :startDate";
        }
        if(!is_null($endDate) && !empty($endDate) ){

            $stmtParams['endDate'] = date_format(date_create($endDate),"Y-m-d 23:59:59");
            $andWhere.= " AND sa.`adoption_date` <= :endDate";
        }
        
        $sql = "
            SELECT
                sa.`adopter_name` AS adopter,
                sa.`adopter_contact` AS adopterContact,
                sa.`adopter_address` AS adopterAddress,
                sa.`adopter_email_address` AS adopterEmail,
                DATE_FORMAT(sa.`adoption_date`, '%m/%d/%Y') AS adoptionDate,
                sa.`remarks` AS remarks,
                p.`name` AS pet
            FROM `shelter_admission` sa
            LEFT JOIN `pet` p ON p.`id` = sa.`pet_id`
            WHERE sa.`branch_id` = :branchId 
            AND (sa.`is_deleted` = 0 OR sa.`is_deleted` IS NULL)
            AND sa.`status` = 'Adopted'
            ".$andWhere."
        ";


        $stmtParams['branchId'] = $userData['branchId'];
        $query = $this->getEntityManager()->getConnection()->prepare($sql);

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }

        $res = $query->executeQuery();
        $results = $res->fetchAllAssociative();

        return $results;
    }



}
